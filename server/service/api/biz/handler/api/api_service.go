// Code generated by hertz generator.

package api

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/jizizr/goligoli/server/kitex_gen/user"
	"github.com/jizizr/goligoli/server/service/api/biz/global"
	api "github.com/jizizr/goligoli/server/service/api/biz/model/api"
	"net/http"
)

// Register .
// @router /register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.RegisterResponse)
	res, err := global.UserClient.Register(ctx, &user.RegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp = &api.RegisterResponse{
		Base: &api.BaseResponse{
			Code:    http.StatusOK,
			Message: "success",
		},
		Token: res.Token,
	}
	c.JSON(consts.StatusOK, resp)
}

// Login .
// @router /login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(api.LoginResponse)
	res, err := global.UserClient.Login(ctx, &user.LoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp = &api.LoginResponse{
		Base: &api.BaseResponse{
			Code:    http.StatusOK,
			Message: "success",
		},
		Token: res.Token,
	}
	c.JSON(consts.StatusOK, resp)
}

// SendBullet .
// @router /bullet/live [POST]
func SendBullet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddBulletRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.AddBulletResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetHistoryBullets .
// @router /bullet/history [GET]
func GetHistoryBullets(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetHistoryBulletsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetBulletResponse)

	c.JSON(consts.StatusOK, resp)
}
