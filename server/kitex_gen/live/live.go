// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package live

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/jizizr/goligoli/server/kitex_gen/base"
)

type CreateLiveRoomRequest struct {
	Room *base.Room `thrift:"room,1" frugal:"1,default,base.Room" json:"room"`
}

func NewCreateLiveRoomRequest() *CreateLiveRoomRequest {
	return &CreateLiveRoomRequest{}
}

func (p *CreateLiveRoomRequest) InitDefault() {
	*p = CreateLiveRoomRequest{}
}

var CreateLiveRoomRequest_Room_DEFAULT *base.Room

func (p *CreateLiveRoomRequest) GetRoom() (v *base.Room) {
	if !p.IsSetRoom() {
		return CreateLiveRoomRequest_Room_DEFAULT
	}
	return p.Room
}
func (p *CreateLiveRoomRequest) SetRoom(val *base.Room) {
	p.Room = val
}

var fieldIDToName_CreateLiveRoomRequest = map[int16]string{
	1: "room",
}

func (p *CreateLiveRoomRequest) IsSetRoom() bool {
	return p.Room != nil
}

func (p *CreateLiveRoomRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateLiveRoomRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateLiveRoomRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewRoom()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Room = _field
	return nil
}

func (p *CreateLiveRoomRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLiveRoomRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateLiveRoomRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("room", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Room.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateLiveRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLiveRoomRequest(%+v)", *p)

}

func (p *CreateLiveRoomRequest) DeepEqual(ano *CreateLiveRoomRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Room) {
		return false
	}
	return true
}

func (p *CreateLiveRoomRequest) Field1DeepEqual(src *base.Room) bool {

	if !p.Room.DeepEqual(src) {
		return false
	}
	return true
}

type CreateLiveRoomResponse struct {
	LiveId int64 `thrift:"live_id,1" frugal:"1,default,i64" json:"live_id"`
}

func NewCreateLiveRoomResponse() *CreateLiveRoomResponse {
	return &CreateLiveRoomResponse{}
}

func (p *CreateLiveRoomResponse) InitDefault() {
	*p = CreateLiveRoomResponse{}
}

func (p *CreateLiveRoomResponse) GetLiveId() (v int64) {
	return p.LiveId
}
func (p *CreateLiveRoomResponse) SetLiveId(val int64) {
	p.LiveId = val
}

var fieldIDToName_CreateLiveRoomResponse = map[int16]string{
	1: "live_id",
}

func (p *CreateLiveRoomResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateLiveRoomResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateLiveRoomResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LiveId = _field
	return nil
}

func (p *CreateLiveRoomResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLiveRoomResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateLiveRoomResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("live_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LiveId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateLiveRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLiveRoomResponse(%+v)", *p)

}

func (p *CreateLiveRoomResponse) DeepEqual(ano *CreateLiveRoomResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LiveId) {
		return false
	}
	return true
}

func (p *CreateLiveRoomResponse) Field1DeepEqual(src int64) bool {

	if p.LiveId != src {
		return false
	}
	return true
}

type GetLiveRoomOwnerRequest struct {
	LiveId int64 `thrift:"live_id,1" frugal:"1,default,i64" json:"live_id"`
}

func NewGetLiveRoomOwnerRequest() *GetLiveRoomOwnerRequest {
	return &GetLiveRoomOwnerRequest{}
}

func (p *GetLiveRoomOwnerRequest) InitDefault() {
	*p = GetLiveRoomOwnerRequest{}
}

func (p *GetLiveRoomOwnerRequest) GetLiveId() (v int64) {
	return p.LiveId
}
func (p *GetLiveRoomOwnerRequest) SetLiveId(val int64) {
	p.LiveId = val
}

var fieldIDToName_GetLiveRoomOwnerRequest = map[int16]string{
	1: "live_id",
}

func (p *GetLiveRoomOwnerRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLiveRoomOwnerRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLiveRoomOwnerRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LiveId = _field
	return nil
}

func (p *GetLiveRoomOwnerRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomOwnerRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLiveRoomOwnerRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("live_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LiveId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLiveRoomOwnerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLiveRoomOwnerRequest(%+v)", *p)

}

func (p *GetLiveRoomOwnerRequest) DeepEqual(ano *GetLiveRoomOwnerRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LiveId) {
		return false
	}
	return true
}

func (p *GetLiveRoomOwnerRequest) Field1DeepEqual(src int64) bool {

	if p.LiveId != src {
		return false
	}
	return true
}

type GetLiveRoomOwnerResponse struct {
	Owner int64 `thrift:"owner,1" frugal:"1,default,i64" json:"owner"`
}

func NewGetLiveRoomOwnerResponse() *GetLiveRoomOwnerResponse {
	return &GetLiveRoomOwnerResponse{}
}

func (p *GetLiveRoomOwnerResponse) InitDefault() {
	*p = GetLiveRoomOwnerResponse{}
}

func (p *GetLiveRoomOwnerResponse) GetOwner() (v int64) {
	return p.Owner
}
func (p *GetLiveRoomOwnerResponse) SetOwner(val int64) {
	p.Owner = val
}

var fieldIDToName_GetLiveRoomOwnerResponse = map[int16]string{
	1: "owner",
}

func (p *GetLiveRoomOwnerResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLiveRoomOwnerResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLiveRoomOwnerResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Owner = _field
	return nil
}

func (p *GetLiveRoomOwnerResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomOwnerResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLiveRoomOwnerResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("owner", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Owner); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLiveRoomOwnerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLiveRoomOwnerResponse(%+v)", *p)

}

func (p *GetLiveRoomOwnerResponse) DeepEqual(ano *GetLiveRoomOwnerResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Owner) {
		return false
	}
	return true
}

func (p *GetLiveRoomOwnerResponse) Field1DeepEqual(src int64) bool {

	if p.Owner != src {
		return false
	}
	return true
}

type GetLiveRoomRequest struct {
	LiveId int64 `thrift:"live_id,1" frugal:"1,default,i64" json:"live_id"`
}

func NewGetLiveRoomRequest() *GetLiveRoomRequest {
	return &GetLiveRoomRequest{}
}

func (p *GetLiveRoomRequest) InitDefault() {
	*p = GetLiveRoomRequest{}
}

func (p *GetLiveRoomRequest) GetLiveId() (v int64) {
	return p.LiveId
}
func (p *GetLiveRoomRequest) SetLiveId(val int64) {
	p.LiveId = val
}

var fieldIDToName_GetLiveRoomRequest = map[int16]string{
	1: "live_id",
}

func (p *GetLiveRoomRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLiveRoomRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLiveRoomRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LiveId = _field
	return nil
}

func (p *GetLiveRoomRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLiveRoomRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("live_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LiveId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLiveRoomRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLiveRoomRequest(%+v)", *p)

}

func (p *GetLiveRoomRequest) DeepEqual(ano *GetLiveRoomRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LiveId) {
		return false
	}
	return true
}

func (p *GetLiveRoomRequest) Field1DeepEqual(src int64) bool {

	if p.LiveId != src {
		return false
	}
	return true
}

type GetLiveRoomResponse struct {
	Room *base.Room `thrift:"room,1" frugal:"1,default,base.Room" json:"room"`
}

func NewGetLiveRoomResponse() *GetLiveRoomResponse {
	return &GetLiveRoomResponse{}
}

func (p *GetLiveRoomResponse) InitDefault() {
	*p = GetLiveRoomResponse{}
}

var GetLiveRoomResponse_Room_DEFAULT *base.Room

func (p *GetLiveRoomResponse) GetRoom() (v *base.Room) {
	if !p.IsSetRoom() {
		return GetLiveRoomResponse_Room_DEFAULT
	}
	return p.Room
}
func (p *GetLiveRoomResponse) SetRoom(val *base.Room) {
	p.Room = val
}

var fieldIDToName_GetLiveRoomResponse = map[int16]string{
	1: "room",
}

func (p *GetLiveRoomResponse) IsSetRoom() bool {
	return p.Room != nil
}

func (p *GetLiveRoomResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLiveRoomResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLiveRoomResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewRoom()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Room = _field
	return nil
}

func (p *GetLiveRoomResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLiveRoomResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("room", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Room.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLiveRoomResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLiveRoomResponse(%+v)", *p)

}

func (p *GetLiveRoomResponse) DeepEqual(ano *GetLiveRoomResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Room) {
		return false
	}
	return true
}

func (p *GetLiveRoomResponse) Field1DeepEqual(src *base.Room) bool {

	if !p.Room.DeepEqual(src) {
		return false
	}
	return true
}

type LiveService interface {
	CreateLiveRoom(ctx context.Context, req *CreateLiveRoomRequest) (r *CreateLiveRoomResponse, err error)

	GetLiveRoomOwner(ctx context.Context, req *GetLiveRoomOwnerRequest) (r *GetLiveRoomOwnerResponse, err error)

	GetLiveRoom(ctx context.Context, req *GetLiveRoomRequest) (r *GetLiveRoomResponse, err error)
}

type LiveServiceClient struct {
	c thrift.TClient
}

func NewLiveServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LiveServiceClient {
	return &LiveServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLiveServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LiveServiceClient {
	return &LiveServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLiveServiceClient(c thrift.TClient) *LiveServiceClient {
	return &LiveServiceClient{
		c: c,
	}
}

func (p *LiveServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LiveServiceClient) CreateLiveRoom(ctx context.Context, req *CreateLiveRoomRequest) (r *CreateLiveRoomResponse, err error) {
	var _args LiveServiceCreateLiveRoomArgs
	_args.Req = req
	var _result LiveServiceCreateLiveRoomResult
	if err = p.Client_().Call(ctx, "CreateLiveRoom", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LiveServiceClient) GetLiveRoomOwner(ctx context.Context, req *GetLiveRoomOwnerRequest) (r *GetLiveRoomOwnerResponse, err error) {
	var _args LiveServiceGetLiveRoomOwnerArgs
	_args.Req = req
	var _result LiveServiceGetLiveRoomOwnerResult
	if err = p.Client_().Call(ctx, "GetLiveRoomOwner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LiveServiceClient) GetLiveRoom(ctx context.Context, req *GetLiveRoomRequest) (r *GetLiveRoomResponse, err error) {
	var _args LiveServiceGetLiveRoomArgs
	_args.Req = req
	var _result LiveServiceGetLiveRoomResult
	if err = p.Client_().Call(ctx, "GetLiveRoom", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type LiveServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LiveService
}

func (p *LiveServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LiveServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LiveServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLiveServiceProcessor(handler LiveService) *LiveServiceProcessor {
	self := &LiveServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateLiveRoom", &liveServiceProcessorCreateLiveRoom{handler: handler})
	self.AddToProcessorMap("GetLiveRoomOwner", &liveServiceProcessorGetLiveRoomOwner{handler: handler})
	self.AddToProcessorMap("GetLiveRoom", &liveServiceProcessorGetLiveRoom{handler: handler})
	return self
}
func (p *LiveServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type liveServiceProcessorCreateLiveRoom struct {
	handler LiveService
}

func (p *liveServiceProcessorCreateLiveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LiveServiceCreateLiveRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateLiveRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LiveServiceCreateLiveRoomResult{}
	var retval *CreateLiveRoomResponse
	if retval, err2 = p.handler.CreateLiveRoom(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateLiveRoom: "+err2.Error())
		oprot.WriteMessageBegin("CreateLiveRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateLiveRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type liveServiceProcessorGetLiveRoomOwner struct {
	handler LiveService
}

func (p *liveServiceProcessorGetLiveRoomOwner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LiveServiceGetLiveRoomOwnerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLiveRoomOwner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LiveServiceGetLiveRoomOwnerResult{}
	var retval *GetLiveRoomOwnerResponse
	if retval, err2 = p.handler.GetLiveRoomOwner(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLiveRoomOwner: "+err2.Error())
		oprot.WriteMessageBegin("GetLiveRoomOwner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLiveRoomOwner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type liveServiceProcessorGetLiveRoom struct {
	handler LiveService
}

func (p *liveServiceProcessorGetLiveRoom) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LiveServiceGetLiveRoomArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLiveRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LiveServiceGetLiveRoomResult{}
	var retval *GetLiveRoomResponse
	if retval, err2 = p.handler.GetLiveRoom(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLiveRoom: "+err2.Error())
		oprot.WriteMessageBegin("GetLiveRoom", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLiveRoom", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type LiveServiceCreateLiveRoomArgs struct {
	Req *CreateLiveRoomRequest `thrift:"req,1" frugal:"1,default,CreateLiveRoomRequest" json:"req"`
}

func NewLiveServiceCreateLiveRoomArgs() *LiveServiceCreateLiveRoomArgs {
	return &LiveServiceCreateLiveRoomArgs{}
}

func (p *LiveServiceCreateLiveRoomArgs) InitDefault() {
	*p = LiveServiceCreateLiveRoomArgs{}
}

var LiveServiceCreateLiveRoomArgs_Req_DEFAULT *CreateLiveRoomRequest

func (p *LiveServiceCreateLiveRoomArgs) GetReq() (v *CreateLiveRoomRequest) {
	if !p.IsSetReq() {
		return LiveServiceCreateLiveRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LiveServiceCreateLiveRoomArgs) SetReq(val *CreateLiveRoomRequest) {
	p.Req = val
}

var fieldIDToName_LiveServiceCreateLiveRoomArgs = map[int16]string{
	1: "req",
}

func (p *LiveServiceCreateLiveRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LiveServiceCreateLiveRoomArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LiveServiceCreateLiveRoomArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LiveServiceCreateLiveRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateLiveRoomRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LiveServiceCreateLiveRoomArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLiveRoom_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LiveServiceCreateLiveRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LiveServiceCreateLiveRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceCreateLiveRoomArgs(%+v)", *p)

}

func (p *LiveServiceCreateLiveRoomArgs) DeepEqual(ano *LiveServiceCreateLiveRoomArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LiveServiceCreateLiveRoomArgs) Field1DeepEqual(src *CreateLiveRoomRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LiveServiceCreateLiveRoomResult struct {
	Success *CreateLiveRoomResponse `thrift:"success,0,optional" frugal:"0,optional,CreateLiveRoomResponse" json:"success,omitempty"`
}

func NewLiveServiceCreateLiveRoomResult() *LiveServiceCreateLiveRoomResult {
	return &LiveServiceCreateLiveRoomResult{}
}

func (p *LiveServiceCreateLiveRoomResult) InitDefault() {
	*p = LiveServiceCreateLiveRoomResult{}
}

var LiveServiceCreateLiveRoomResult_Success_DEFAULT *CreateLiveRoomResponse

func (p *LiveServiceCreateLiveRoomResult) GetSuccess() (v *CreateLiveRoomResponse) {
	if !p.IsSetSuccess() {
		return LiveServiceCreateLiveRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LiveServiceCreateLiveRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateLiveRoomResponse)
}

var fieldIDToName_LiveServiceCreateLiveRoomResult = map[int16]string{
	0: "success",
}

func (p *LiveServiceCreateLiveRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LiveServiceCreateLiveRoomResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LiveServiceCreateLiveRoomResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LiveServiceCreateLiveRoomResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateLiveRoomResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LiveServiceCreateLiveRoomResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateLiveRoom_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LiveServiceCreateLiveRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LiveServiceCreateLiveRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceCreateLiveRoomResult(%+v)", *p)

}

func (p *LiveServiceCreateLiveRoomResult) DeepEqual(ano *LiveServiceCreateLiveRoomResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LiveServiceCreateLiveRoomResult) Field0DeepEqual(src *CreateLiveRoomResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LiveServiceGetLiveRoomOwnerArgs struct {
	Req *GetLiveRoomOwnerRequest `thrift:"req,1" frugal:"1,default,GetLiveRoomOwnerRequest" json:"req"`
}

func NewLiveServiceGetLiveRoomOwnerArgs() *LiveServiceGetLiveRoomOwnerArgs {
	return &LiveServiceGetLiveRoomOwnerArgs{}
}

func (p *LiveServiceGetLiveRoomOwnerArgs) InitDefault() {
	*p = LiveServiceGetLiveRoomOwnerArgs{}
}

var LiveServiceGetLiveRoomOwnerArgs_Req_DEFAULT *GetLiveRoomOwnerRequest

func (p *LiveServiceGetLiveRoomOwnerArgs) GetReq() (v *GetLiveRoomOwnerRequest) {
	if !p.IsSetReq() {
		return LiveServiceGetLiveRoomOwnerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LiveServiceGetLiveRoomOwnerArgs) SetReq(val *GetLiveRoomOwnerRequest) {
	p.Req = val
}

var fieldIDToName_LiveServiceGetLiveRoomOwnerArgs = map[int16]string{
	1: "req",
}

func (p *LiveServiceGetLiveRoomOwnerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LiveServiceGetLiveRoomOwnerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LiveServiceGetLiveRoomOwnerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomOwnerArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetLiveRoomOwnerRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LiveServiceGetLiveRoomOwnerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomOwner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomOwnerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomOwnerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceGetLiveRoomOwnerArgs(%+v)", *p)

}

func (p *LiveServiceGetLiveRoomOwnerArgs) DeepEqual(ano *LiveServiceGetLiveRoomOwnerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LiveServiceGetLiveRoomOwnerArgs) Field1DeepEqual(src *GetLiveRoomOwnerRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LiveServiceGetLiveRoomOwnerResult struct {
	Success *GetLiveRoomOwnerResponse `thrift:"success,0,optional" frugal:"0,optional,GetLiveRoomOwnerResponse" json:"success,omitempty"`
}

func NewLiveServiceGetLiveRoomOwnerResult() *LiveServiceGetLiveRoomOwnerResult {
	return &LiveServiceGetLiveRoomOwnerResult{}
}

func (p *LiveServiceGetLiveRoomOwnerResult) InitDefault() {
	*p = LiveServiceGetLiveRoomOwnerResult{}
}

var LiveServiceGetLiveRoomOwnerResult_Success_DEFAULT *GetLiveRoomOwnerResponse

func (p *LiveServiceGetLiveRoomOwnerResult) GetSuccess() (v *GetLiveRoomOwnerResponse) {
	if !p.IsSetSuccess() {
		return LiveServiceGetLiveRoomOwnerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LiveServiceGetLiveRoomOwnerResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLiveRoomOwnerResponse)
}

var fieldIDToName_LiveServiceGetLiveRoomOwnerResult = map[int16]string{
	0: "success",
}

func (p *LiveServiceGetLiveRoomOwnerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LiveServiceGetLiveRoomOwnerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LiveServiceGetLiveRoomOwnerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomOwnerResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetLiveRoomOwnerResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LiveServiceGetLiveRoomOwnerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomOwner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomOwnerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomOwnerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceGetLiveRoomOwnerResult(%+v)", *p)

}

func (p *LiveServiceGetLiveRoomOwnerResult) DeepEqual(ano *LiveServiceGetLiveRoomOwnerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LiveServiceGetLiveRoomOwnerResult) Field0DeepEqual(src *GetLiveRoomOwnerResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LiveServiceGetLiveRoomArgs struct {
	Req *GetLiveRoomRequest `thrift:"req,1" frugal:"1,default,GetLiveRoomRequest" json:"req"`
}

func NewLiveServiceGetLiveRoomArgs() *LiveServiceGetLiveRoomArgs {
	return &LiveServiceGetLiveRoomArgs{}
}

func (p *LiveServiceGetLiveRoomArgs) InitDefault() {
	*p = LiveServiceGetLiveRoomArgs{}
}

var LiveServiceGetLiveRoomArgs_Req_DEFAULT *GetLiveRoomRequest

func (p *LiveServiceGetLiveRoomArgs) GetReq() (v *GetLiveRoomRequest) {
	if !p.IsSetReq() {
		return LiveServiceGetLiveRoomArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LiveServiceGetLiveRoomArgs) SetReq(val *GetLiveRoomRequest) {
	p.Req = val
}

var fieldIDToName_LiveServiceGetLiveRoomArgs = map[int16]string{
	1: "req",
}

func (p *LiveServiceGetLiveRoomArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LiveServiceGetLiveRoomArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LiveServiceGetLiveRoomArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetLiveRoomRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LiveServiceGetLiveRoomArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoom_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceGetLiveRoomArgs(%+v)", *p)

}

func (p *LiveServiceGetLiveRoomArgs) DeepEqual(ano *LiveServiceGetLiveRoomArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LiveServiceGetLiveRoomArgs) Field1DeepEqual(src *GetLiveRoomRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LiveServiceGetLiveRoomResult struct {
	Success *GetLiveRoomResponse `thrift:"success,0,optional" frugal:"0,optional,GetLiveRoomResponse" json:"success,omitempty"`
}

func NewLiveServiceGetLiveRoomResult() *LiveServiceGetLiveRoomResult {
	return &LiveServiceGetLiveRoomResult{}
}

func (p *LiveServiceGetLiveRoomResult) InitDefault() {
	*p = LiveServiceGetLiveRoomResult{}
}

var LiveServiceGetLiveRoomResult_Success_DEFAULT *GetLiveRoomResponse

func (p *LiveServiceGetLiveRoomResult) GetSuccess() (v *GetLiveRoomResponse) {
	if !p.IsSetSuccess() {
		return LiveServiceGetLiveRoomResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LiveServiceGetLiveRoomResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLiveRoomResponse)
}

var fieldIDToName_LiveServiceGetLiveRoomResult = map[int16]string{
	0: "success",
}

func (p *LiveServiceGetLiveRoomResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LiveServiceGetLiveRoomResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LiveServiceGetLiveRoomResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetLiveRoomResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LiveServiceGetLiveRoomResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoom_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LiveServiceGetLiveRoomResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LiveServiceGetLiveRoomResult(%+v)", *p)

}

func (p *LiveServiceGetLiveRoomResult) DeepEqual(ano *LiveServiceGetLiveRoomResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LiveServiceGetLiveRoomResult) Field0DeepEqual(src *GetLiveRoomResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
