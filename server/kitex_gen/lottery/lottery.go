// Code generated by thriftgo (0.3.12). DO NOT EDIT.

package lottery

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/jizizr/goligoli/server/kitex_gen/base"
	"strings"
)

type SetLotteryRequest struct {
	Gift     *base.Gift `thrift:"gift,1" frugal:"1,default,base.Gift" json:"gift"`
	LiveTime int64      `thrift:"live_time,2" frugal:"2,default,i64" json:"live_time"`
}

func NewSetLotteryRequest() *SetLotteryRequest {
	return &SetLotteryRequest{}
}

func (p *SetLotteryRequest) InitDefault() {
	*p = SetLotteryRequest{}
}

var SetLotteryRequest_Gift_DEFAULT *base.Gift

func (p *SetLotteryRequest) GetGift() (v *base.Gift) {
	if !p.IsSetGift() {
		return SetLotteryRequest_Gift_DEFAULT
	}
	return p.Gift
}

func (p *SetLotteryRequest) GetLiveTime() (v int64) {
	return p.LiveTime
}
func (p *SetLotteryRequest) SetGift(val *base.Gift) {
	p.Gift = val
}
func (p *SetLotteryRequest) SetLiveTime(val int64) {
	p.LiveTime = val
}

var fieldIDToName_SetLotteryRequest = map[int16]string{
	1: "gift",
	2: "live_time",
}

func (p *SetLotteryRequest) IsSetGift() bool {
	return p.Gift != nil
}

func (p *SetLotteryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetLotteryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetLotteryRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewGift()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Gift = _field
	return nil
}
func (p *SetLotteryRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LiveTime = _field
	return nil
}

func (p *SetLotteryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetLotteryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetLotteryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gift", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Gift.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetLotteryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("live_time", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LiveTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SetLotteryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetLotteryRequest(%+v)", *p)

}

func (p *SetLotteryRequest) DeepEqual(ano *SetLotteryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Gift) {
		return false
	}
	if !p.Field2DeepEqual(ano.LiveTime) {
		return false
	}
	return true
}

func (p *SetLotteryRequest) Field1DeepEqual(src *base.Gift) bool {

	if !p.Gift.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SetLotteryRequest) Field2DeepEqual(src int64) bool {

	if p.LiveTime != src {
		return false
	}
	return true
}

type SetLotteryResponse struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewSetLotteryResponse() *SetLotteryResponse {
	return &SetLotteryResponse{}
}

func (p *SetLotteryResponse) InitDefault() {
	*p = SetLotteryResponse{}
}

func (p *SetLotteryResponse) GetId() (v int64) {
	return p.Id
}
func (p *SetLotteryResponse) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_SetLotteryResponse = map[int16]string{
	1: "id",
}

func (p *SetLotteryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SetLotteryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SetLotteryResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *SetLotteryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetLotteryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SetLotteryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *SetLotteryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SetLotteryResponse(%+v)", *p)

}

func (p *SetLotteryResponse) DeepEqual(ano *SetLotteryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *SetLotteryResponse) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type GetLotteryRequest struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewGetLotteryRequest() *GetLotteryRequest {
	return &GetLotteryRequest{}
}

func (p *GetLotteryRequest) InitDefault() {
	*p = GetLotteryRequest{}
}

func (p *GetLotteryRequest) GetId() (v int64) {
	return p.Id
}
func (p *GetLotteryRequest) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_GetLotteryRequest = map[int16]string{
	1: "id",
}

func (p *GetLotteryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLotteryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLotteryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *GetLotteryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLotteryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLotteryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLotteryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLotteryRequest(%+v)", *p)

}

func (p *GetLotteryRequest) DeepEqual(ano *GetLotteryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *GetLotteryRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type GetLotteryResponse struct {
	Gift *base.Gift `thrift:"gift,1" frugal:"1,default,base.Gift" json:"gift"`
}

func NewGetLotteryResponse() *GetLotteryResponse {
	return &GetLotteryResponse{}
}

func (p *GetLotteryResponse) InitDefault() {
	*p = GetLotteryResponse{}
}

var GetLotteryResponse_Gift_DEFAULT *base.Gift

func (p *GetLotteryResponse) GetGift() (v *base.Gift) {
	if !p.IsSetGift() {
		return GetLotteryResponse_Gift_DEFAULT
	}
	return p.Gift
}
func (p *GetLotteryResponse) SetGift(val *base.Gift) {
	p.Gift = val
}

var fieldIDToName_GetLotteryResponse = map[int16]string{
	1: "gift",
}

func (p *GetLotteryResponse) IsSetGift() bool {
	return p.Gift != nil
}

func (p *GetLotteryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLotteryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLotteryResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := base.NewGift()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Gift = _field
	return nil
}

func (p *GetLotteryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLotteryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLotteryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gift", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Gift.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLotteryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLotteryResponse(%+v)", *p)

}

func (p *GetLotteryResponse) DeepEqual(ano *GetLotteryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Gift) {
		return false
	}
	return true
}

func (p *GetLotteryResponse) Field1DeepEqual(src *base.Gift) bool {

	if !p.Gift.DeepEqual(src) {
		return false
	}
	return true
}

type JoinLotteryRequest struct {
	Id  int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	Uid int64 `thrift:"uid,2" frugal:"2,default,i64" json:"uid"`
}

func NewJoinLotteryRequest() *JoinLotteryRequest {
	return &JoinLotteryRequest{}
}

func (p *JoinLotteryRequest) InitDefault() {
	*p = JoinLotteryRequest{}
}

func (p *JoinLotteryRequest) GetId() (v int64) {
	return p.Id
}

func (p *JoinLotteryRequest) GetUid() (v int64) {
	return p.Uid
}
func (p *JoinLotteryRequest) SetId(val int64) {
	p.Id = val
}
func (p *JoinLotteryRequest) SetUid(val int64) {
	p.Uid = val
}

var fieldIDToName_JoinLotteryRequest = map[int16]string{
	1: "id",
	2: "uid",
}

func (p *JoinLotteryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JoinLotteryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JoinLotteryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}
func (p *JoinLotteryRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Uid = _field
	return nil
}

func (p *JoinLotteryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinLotteryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JoinLotteryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JoinLotteryRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uid", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Uid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *JoinLotteryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinLotteryRequest(%+v)", *p)

}

func (p *JoinLotteryRequest) DeepEqual(ano *JoinLotteryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uid) {
		return false
	}
	return true
}

func (p *JoinLotteryRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *JoinLotteryRequest) Field2DeepEqual(src int64) bool {

	if p.Uid != src {
		return false
	}
	return true
}

type JoinLotteryResponse struct {
	Success bool `thrift:"success,1" frugal:"1,default,bool" json:"success"`
}

func NewJoinLotteryResponse() *JoinLotteryResponse {
	return &JoinLotteryResponse{}
}

func (p *JoinLotteryResponse) InitDefault() {
	*p = JoinLotteryResponse{}
}

func (p *JoinLotteryResponse) GetSuccess() (v bool) {
	return p.Success
}
func (p *JoinLotteryResponse) SetSuccess(val bool) {
	p.Success = val
}

var fieldIDToName_JoinLotteryResponse = map[int16]string{
	1: "success",
}

func (p *JoinLotteryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_JoinLotteryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *JoinLotteryResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Success = _field
	return nil
}

func (p *JoinLotteryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinLotteryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *JoinLotteryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("success", thrift.BOOL, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.Success); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *JoinLotteryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("JoinLotteryResponse(%+v)", *p)

}

func (p *JoinLotteryResponse) DeepEqual(ano *JoinLotteryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *JoinLotteryResponse) Field1DeepEqual(src bool) bool {

	if p.Success != src {
		return false
	}
	return true
}

type GetLiveRoomLotteryRequest struct {
	LiveId int64 `thrift:"live_id,1" frugal:"1,default,i64" json:"live_id"`
}

func NewGetLiveRoomLotteryRequest() *GetLiveRoomLotteryRequest {
	return &GetLiveRoomLotteryRequest{}
}

func (p *GetLiveRoomLotteryRequest) InitDefault() {
	*p = GetLiveRoomLotteryRequest{}
}

func (p *GetLiveRoomLotteryRequest) GetLiveId() (v int64) {
	return p.LiveId
}
func (p *GetLiveRoomLotteryRequest) SetLiveId(val int64) {
	p.LiveId = val
}

var fieldIDToName_GetLiveRoomLotteryRequest = map[int16]string{
	1: "live_id",
}

func (p *GetLiveRoomLotteryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLiveRoomLotteryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLiveRoomLotteryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.LiveId = _field
	return nil
}

func (p *GetLiveRoomLotteryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomLotteryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLiveRoomLotteryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("live_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.LiveId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetLiveRoomLotteryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLiveRoomLotteryRequest(%+v)", *p)

}

func (p *GetLiveRoomLotteryRequest) DeepEqual(ano *GetLiveRoomLotteryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LiveId) {
		return false
	}
	return true
}

func (p *GetLiveRoomLotteryRequest) Field1DeepEqual(src int64) bool {

	if p.LiveId != src {
		return false
	}
	return true
}

type GetLiveRoomLotteryResponse struct {
	Gifts []*base.Gift `thrift:"gifts,2" frugal:"2,default,list<base.Gift>" json:"gifts"`
}

func NewGetLiveRoomLotteryResponse() *GetLiveRoomLotteryResponse {
	return &GetLiveRoomLotteryResponse{}
}

func (p *GetLiveRoomLotteryResponse) InitDefault() {
	*p = GetLiveRoomLotteryResponse{}
}

func (p *GetLiveRoomLotteryResponse) GetGifts() (v []*base.Gift) {
	return p.Gifts
}
func (p *GetLiveRoomLotteryResponse) SetGifts(val []*base.Gift) {
	p.Gifts = val
}

var fieldIDToName_GetLiveRoomLotteryResponse = map[int16]string{
	2: "gifts",
}

func (p *GetLiveRoomLotteryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetLiveRoomLotteryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetLiveRoomLotteryResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*base.Gift, 0, size)
	values := make([]base.Gift, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Gifts = _field
	return nil
}

func (p *GetLiveRoomLotteryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomLotteryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetLiveRoomLotteryResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("gifts", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Gifts)); err != nil {
		return err
	}
	for _, v := range p.Gifts {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetLiveRoomLotteryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLiveRoomLotteryResponse(%+v)", *p)

}

func (p *GetLiveRoomLotteryResponse) DeepEqual(ano *GetLiveRoomLotteryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field2DeepEqual(ano.Gifts) {
		return false
	}
	return true
}

func (p *GetLiveRoomLotteryResponse) Field2DeepEqual(src []*base.Gift) bool {

	if len(p.Gifts) != len(src) {
		return false
	}
	for i, v := range p.Gifts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type DrawLotteryRequest struct {
	Id int64 `thrift:"id,1" frugal:"1,default,i64" json:"id"`
}

func NewDrawLotteryRequest() *DrawLotteryRequest {
	return &DrawLotteryRequest{}
}

func (p *DrawLotteryRequest) InitDefault() {
	*p = DrawLotteryRequest{}
}

func (p *DrawLotteryRequest) GetId() (v int64) {
	return p.Id
}
func (p *DrawLotteryRequest) SetId(val int64) {
	p.Id = val
}

var fieldIDToName_DrawLotteryRequest = map[int16]string{
	1: "id",
}

func (p *DrawLotteryRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DrawLotteryRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DrawLotteryRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Id = _field
	return nil
}

func (p *DrawLotteryRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DrawLotteryRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DrawLotteryRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DrawLotteryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DrawLotteryRequest(%+v)", *p)

}

func (p *DrawLotteryRequest) DeepEqual(ano *DrawLotteryRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	return true
}

func (p *DrawLotteryRequest) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}

type DrawLotteryResponse struct {
	Msg string `thrift:"msg,1" frugal:"1,default,string" json:"msg"`
}

func NewDrawLotteryResponse() *DrawLotteryResponse {
	return &DrawLotteryResponse{}
}

func (p *DrawLotteryResponse) InitDefault() {
	*p = DrawLotteryResponse{}
}

func (p *DrawLotteryResponse) GetMsg() (v string) {
	return p.Msg
}
func (p *DrawLotteryResponse) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_DrawLotteryResponse = map[int16]string{
	1: "msg",
}

func (p *DrawLotteryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DrawLotteryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DrawLotteryResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Msg = _field
	return nil
}

func (p *DrawLotteryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DrawLotteryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DrawLotteryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DrawLotteryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DrawLotteryResponse(%+v)", *p)

}

func (p *DrawLotteryResponse) DeepEqual(ano *DrawLotteryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *DrawLotteryResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type GetAllUnDrawLotteryResponse struct {
	Ids []int64 `thrift:"ids,1" frugal:"1,default,list<i64>" json:"ids"`
}

func NewGetAllUnDrawLotteryResponse() *GetAllUnDrawLotteryResponse {
	return &GetAllUnDrawLotteryResponse{}
}

func (p *GetAllUnDrawLotteryResponse) InitDefault() {
	*p = GetAllUnDrawLotteryResponse{}
}

func (p *GetAllUnDrawLotteryResponse) GetIds() (v []int64) {
	return p.Ids
}
func (p *GetAllUnDrawLotteryResponse) SetIds(val []int64) {
	p.Ids = val
}

var fieldIDToName_GetAllUnDrawLotteryResponse = map[int16]string{
	1: "ids",
}

func (p *GetAllUnDrawLotteryResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetAllUnDrawLotteryResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetAllUnDrawLotteryResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Ids = _field
	return nil
}

func (p *GetAllUnDrawLotteryResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllUnDrawLotteryResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetAllUnDrawLotteryResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("ids", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Ids)); err != nil {
		return err
	}
	for _, v := range p.Ids {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetAllUnDrawLotteryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetAllUnDrawLotteryResponse(%+v)", *p)

}

func (p *GetAllUnDrawLotteryResponse) DeepEqual(ano *GetAllUnDrawLotteryResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Ids) {
		return false
	}
	return true
}

func (p *GetAllUnDrawLotteryResponse) Field1DeepEqual(src []int64) bool {

	if len(p.Ids) != len(src) {
		return false
	}
	for i, v := range p.Ids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type LotteryService interface {
	SetLottery(ctx context.Context, req *SetLotteryRequest) (r *SetLotteryResponse, err error)

	GetLottery(ctx context.Context, req *GetLotteryRequest) (r *GetLotteryResponse, err error)

	JoinLottery(ctx context.Context, req *JoinLotteryRequest) (r *JoinLotteryResponse, err error)

	GetLiveRoomLottery(ctx context.Context, req *GetLiveRoomLotteryRequest) (r *GetLiveRoomLotteryResponse, err error)

	DrawLottery(ctx context.Context, req *DrawLotteryRequest) (r *DrawLotteryResponse, err error)

	GetAllUnDrawLottery(ctx context.Context) (r *GetAllUnDrawLotteryResponse, err error)
}

type LotteryServiceClient struct {
	c thrift.TClient
}

func NewLotteryServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LotteryServiceClient {
	return &LotteryServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewLotteryServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LotteryServiceClient {
	return &LotteryServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewLotteryServiceClient(c thrift.TClient) *LotteryServiceClient {
	return &LotteryServiceClient{
		c: c,
	}
}

func (p *LotteryServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *LotteryServiceClient) SetLottery(ctx context.Context, req *SetLotteryRequest) (r *SetLotteryResponse, err error) {
	var _args LotteryServiceSetLotteryArgs
	_args.Req = req
	var _result LotteryServiceSetLotteryResult
	if err = p.Client_().Call(ctx, "SetLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetLottery(ctx context.Context, req *GetLotteryRequest) (r *GetLotteryResponse, err error) {
	var _args LotteryServiceGetLotteryArgs
	_args.Req = req
	var _result LotteryServiceGetLotteryResult
	if err = p.Client_().Call(ctx, "GetLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) JoinLottery(ctx context.Context, req *JoinLotteryRequest) (r *JoinLotteryResponse, err error) {
	var _args LotteryServiceJoinLotteryArgs
	_args.Req = req
	var _result LotteryServiceJoinLotteryResult
	if err = p.Client_().Call(ctx, "JoinLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetLiveRoomLottery(ctx context.Context, req *GetLiveRoomLotteryRequest) (r *GetLiveRoomLotteryResponse, err error) {
	var _args LotteryServiceGetLiveRoomLotteryArgs
	_args.Req = req
	var _result LotteryServiceGetLiveRoomLotteryResult
	if err = p.Client_().Call(ctx, "GetLiveRoomLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) DrawLottery(ctx context.Context, req *DrawLotteryRequest) (r *DrawLotteryResponse, err error) {
	var _args LotteryServiceDrawLotteryArgs
	_args.Req = req
	var _result LotteryServiceDrawLotteryResult
	if err = p.Client_().Call(ctx, "DrawLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *LotteryServiceClient) GetAllUnDrawLottery(ctx context.Context) (r *GetAllUnDrawLotteryResponse, err error) {
	var _args LotteryServiceGetAllUnDrawLotteryArgs
	var _result LotteryServiceGetAllUnDrawLotteryResult
	if err = p.Client_().Call(ctx, "GetAllUnDrawLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type LotteryServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      LotteryService
}

func (p *LotteryServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *LotteryServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *LotteryServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewLotteryServiceProcessor(handler LotteryService) *LotteryServiceProcessor {
	self := &LotteryServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("SetLottery", &lotteryServiceProcessorSetLottery{handler: handler})
	self.AddToProcessorMap("GetLottery", &lotteryServiceProcessorGetLottery{handler: handler})
	self.AddToProcessorMap("JoinLottery", &lotteryServiceProcessorJoinLottery{handler: handler})
	self.AddToProcessorMap("GetLiveRoomLottery", &lotteryServiceProcessorGetLiveRoomLottery{handler: handler})
	self.AddToProcessorMap("DrawLottery", &lotteryServiceProcessorDrawLottery{handler: handler})
	self.AddToProcessorMap("GetAllUnDrawLottery", &lotteryServiceProcessorGetAllUnDrawLottery{handler: handler})
	return self
}
func (p *LotteryServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type lotteryServiceProcessorSetLottery struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorSetLottery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceSetLotteryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SetLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceSetLotteryResult{}
	var retval *SetLotteryResponse
	if retval, err2 = p.handler.SetLottery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SetLottery: "+err2.Error())
		oprot.WriteMessageBegin("SetLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SetLottery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetLottery struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetLottery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetLotteryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetLotteryResult{}
	var retval *GetLotteryResponse
	if retval, err2 = p.handler.GetLottery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLottery: "+err2.Error())
		oprot.WriteMessageBegin("GetLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLottery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorJoinLottery struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorJoinLottery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceJoinLotteryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("JoinLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceJoinLotteryResult{}
	var retval *JoinLotteryResponse
	if retval, err2 = p.handler.JoinLottery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing JoinLottery: "+err2.Error())
		oprot.WriteMessageBegin("JoinLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("JoinLottery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetLiveRoomLottery struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetLiveRoomLottery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetLiveRoomLotteryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetLiveRoomLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetLiveRoomLotteryResult{}
	var retval *GetLiveRoomLotteryResponse
	if retval, err2 = p.handler.GetLiveRoomLottery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLiveRoomLottery: "+err2.Error())
		oprot.WriteMessageBegin("GetLiveRoomLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetLiveRoomLottery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorDrawLottery struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorDrawLottery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceDrawLotteryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DrawLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceDrawLotteryResult{}
	var retval *DrawLotteryResponse
	if retval, err2 = p.handler.DrawLottery(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DrawLottery: "+err2.Error())
		oprot.WriteMessageBegin("DrawLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DrawLottery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type lotteryServiceProcessorGetAllUnDrawLottery struct {
	handler LotteryService
}

func (p *lotteryServiceProcessorGetAllUnDrawLottery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := LotteryServiceGetAllUnDrawLotteryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetAllUnDrawLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := LotteryServiceGetAllUnDrawLotteryResult{}
	var retval *GetAllUnDrawLotteryResponse
	if retval, err2 = p.handler.GetAllUnDrawLottery(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetAllUnDrawLottery: "+err2.Error())
		oprot.WriteMessageBegin("GetAllUnDrawLottery", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetAllUnDrawLottery", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type LotteryServiceSetLotteryArgs struct {
	Req *SetLotteryRequest `thrift:"req,1" frugal:"1,default,SetLotteryRequest" json:"req"`
}

func NewLotteryServiceSetLotteryArgs() *LotteryServiceSetLotteryArgs {
	return &LotteryServiceSetLotteryArgs{}
}

func (p *LotteryServiceSetLotteryArgs) InitDefault() {
	*p = LotteryServiceSetLotteryArgs{}
}

var LotteryServiceSetLotteryArgs_Req_DEFAULT *SetLotteryRequest

func (p *LotteryServiceSetLotteryArgs) GetReq() (v *SetLotteryRequest) {
	if !p.IsSetReq() {
		return LotteryServiceSetLotteryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceSetLotteryArgs) SetReq(val *SetLotteryRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceSetLotteryArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceSetLotteryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceSetLotteryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceSetLotteryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceSetLotteryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSetLotteryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LotteryServiceSetLotteryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetLottery_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceSetLotteryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceSetLotteryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceSetLotteryArgs(%+v)", *p)

}

func (p *LotteryServiceSetLotteryArgs) DeepEqual(ano *LotteryServiceSetLotteryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceSetLotteryArgs) Field1DeepEqual(src *SetLotteryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceSetLotteryResult struct {
	Success *SetLotteryResponse `thrift:"success,0,optional" frugal:"0,optional,SetLotteryResponse" json:"success,omitempty"`
}

func NewLotteryServiceSetLotteryResult() *LotteryServiceSetLotteryResult {
	return &LotteryServiceSetLotteryResult{}
}

func (p *LotteryServiceSetLotteryResult) InitDefault() {
	*p = LotteryServiceSetLotteryResult{}
}

var LotteryServiceSetLotteryResult_Success_DEFAULT *SetLotteryResponse

func (p *LotteryServiceSetLotteryResult) GetSuccess() (v *SetLotteryResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceSetLotteryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceSetLotteryResult) SetSuccess(x interface{}) {
	p.Success = x.(*SetLotteryResponse)
}

var fieldIDToName_LotteryServiceSetLotteryResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceSetLotteryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceSetLotteryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceSetLotteryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceSetLotteryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSetLotteryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LotteryServiceSetLotteryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SetLottery_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceSetLotteryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceSetLotteryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceSetLotteryResult(%+v)", *p)

}

func (p *LotteryServiceSetLotteryResult) DeepEqual(ano *LotteryServiceSetLotteryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceSetLotteryResult) Field0DeepEqual(src *SetLotteryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetLotteryArgs struct {
	Req *GetLotteryRequest `thrift:"req,1" frugal:"1,default,GetLotteryRequest" json:"req"`
}

func NewLotteryServiceGetLotteryArgs() *LotteryServiceGetLotteryArgs {
	return &LotteryServiceGetLotteryArgs{}
}

func (p *LotteryServiceGetLotteryArgs) InitDefault() {
	*p = LotteryServiceGetLotteryArgs{}
}

var LotteryServiceGetLotteryArgs_Req_DEFAULT *GetLotteryRequest

func (p *LotteryServiceGetLotteryArgs) GetReq() (v *GetLotteryRequest) {
	if !p.IsSetReq() {
		return LotteryServiceGetLotteryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceGetLotteryArgs) SetReq(val *GetLotteryRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceGetLotteryArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceGetLotteryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceGetLotteryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetLotteryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetLotteryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetLotteryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LotteryServiceGetLotteryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLottery_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetLotteryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceGetLotteryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetLotteryArgs(%+v)", *p)

}

func (p *LotteryServiceGetLotteryArgs) DeepEqual(ano *LotteryServiceGetLotteryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceGetLotteryArgs) Field1DeepEqual(src *GetLotteryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetLotteryResult struct {
	Success *GetLotteryResponse `thrift:"success,0,optional" frugal:"0,optional,GetLotteryResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetLotteryResult() *LotteryServiceGetLotteryResult {
	return &LotteryServiceGetLotteryResult{}
}

func (p *LotteryServiceGetLotteryResult) InitDefault() {
	*p = LotteryServiceGetLotteryResult{}
}

var LotteryServiceGetLotteryResult_Success_DEFAULT *GetLotteryResponse

func (p *LotteryServiceGetLotteryResult) GetSuccess() (v *GetLotteryResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetLotteryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetLotteryResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLotteryResponse)
}

var fieldIDToName_LotteryServiceGetLotteryResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetLotteryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetLotteryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetLotteryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetLotteryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetLotteryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LotteryServiceGetLotteryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLottery_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetLotteryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetLotteryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetLotteryResult(%+v)", *p)

}

func (p *LotteryServiceGetLotteryResult) DeepEqual(ano *LotteryServiceGetLotteryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetLotteryResult) Field0DeepEqual(src *GetLotteryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceJoinLotteryArgs struct {
	Req *JoinLotteryRequest `thrift:"req,1" frugal:"1,default,JoinLotteryRequest" json:"req"`
}

func NewLotteryServiceJoinLotteryArgs() *LotteryServiceJoinLotteryArgs {
	return &LotteryServiceJoinLotteryArgs{}
}

func (p *LotteryServiceJoinLotteryArgs) InitDefault() {
	*p = LotteryServiceJoinLotteryArgs{}
}

var LotteryServiceJoinLotteryArgs_Req_DEFAULT *JoinLotteryRequest

func (p *LotteryServiceJoinLotteryArgs) GetReq() (v *JoinLotteryRequest) {
	if !p.IsSetReq() {
		return LotteryServiceJoinLotteryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceJoinLotteryArgs) SetReq(val *JoinLotteryRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceJoinLotteryArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceJoinLotteryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceJoinLotteryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceJoinLotteryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceJoinLotteryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewJoinLotteryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LotteryServiceJoinLotteryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinLottery_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceJoinLotteryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceJoinLotteryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceJoinLotteryArgs(%+v)", *p)

}

func (p *LotteryServiceJoinLotteryArgs) DeepEqual(ano *LotteryServiceJoinLotteryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceJoinLotteryArgs) Field1DeepEqual(src *JoinLotteryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceJoinLotteryResult struct {
	Success *JoinLotteryResponse `thrift:"success,0,optional" frugal:"0,optional,JoinLotteryResponse" json:"success,omitempty"`
}

func NewLotteryServiceJoinLotteryResult() *LotteryServiceJoinLotteryResult {
	return &LotteryServiceJoinLotteryResult{}
}

func (p *LotteryServiceJoinLotteryResult) InitDefault() {
	*p = LotteryServiceJoinLotteryResult{}
}

var LotteryServiceJoinLotteryResult_Success_DEFAULT *JoinLotteryResponse

func (p *LotteryServiceJoinLotteryResult) GetSuccess() (v *JoinLotteryResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceJoinLotteryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceJoinLotteryResult) SetSuccess(x interface{}) {
	p.Success = x.(*JoinLotteryResponse)
}

var fieldIDToName_LotteryServiceJoinLotteryResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceJoinLotteryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceJoinLotteryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceJoinLotteryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceJoinLotteryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewJoinLotteryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LotteryServiceJoinLotteryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("JoinLottery_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceJoinLotteryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceJoinLotteryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceJoinLotteryResult(%+v)", *p)

}

func (p *LotteryServiceJoinLotteryResult) DeepEqual(ano *LotteryServiceJoinLotteryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceJoinLotteryResult) Field0DeepEqual(src *JoinLotteryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetLiveRoomLotteryArgs struct {
	Req *GetLiveRoomLotteryRequest `thrift:"req,1" frugal:"1,default,GetLiveRoomLotteryRequest" json:"req"`
}

func NewLotteryServiceGetLiveRoomLotteryArgs() *LotteryServiceGetLiveRoomLotteryArgs {
	return &LotteryServiceGetLiveRoomLotteryArgs{}
}

func (p *LotteryServiceGetLiveRoomLotteryArgs) InitDefault() {
	*p = LotteryServiceGetLiveRoomLotteryArgs{}
}

var LotteryServiceGetLiveRoomLotteryArgs_Req_DEFAULT *GetLiveRoomLotteryRequest

func (p *LotteryServiceGetLiveRoomLotteryArgs) GetReq() (v *GetLiveRoomLotteryRequest) {
	if !p.IsSetReq() {
		return LotteryServiceGetLiveRoomLotteryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceGetLiveRoomLotteryArgs) SetReq(val *GetLiveRoomLotteryRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceGetLiveRoomLotteryArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceGetLiveRoomLotteryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceGetLiveRoomLotteryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetLiveRoomLotteryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetLiveRoomLotteryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetLiveRoomLotteryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LotteryServiceGetLiveRoomLotteryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomLottery_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetLiveRoomLotteryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceGetLiveRoomLotteryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetLiveRoomLotteryArgs(%+v)", *p)

}

func (p *LotteryServiceGetLiveRoomLotteryArgs) DeepEqual(ano *LotteryServiceGetLiveRoomLotteryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceGetLiveRoomLotteryArgs) Field1DeepEqual(src *GetLiveRoomLotteryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetLiveRoomLotteryResult struct {
	Success *GetLiveRoomLotteryResponse `thrift:"success,0,optional" frugal:"0,optional,GetLiveRoomLotteryResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetLiveRoomLotteryResult() *LotteryServiceGetLiveRoomLotteryResult {
	return &LotteryServiceGetLiveRoomLotteryResult{}
}

func (p *LotteryServiceGetLiveRoomLotteryResult) InitDefault() {
	*p = LotteryServiceGetLiveRoomLotteryResult{}
}

var LotteryServiceGetLiveRoomLotteryResult_Success_DEFAULT *GetLiveRoomLotteryResponse

func (p *LotteryServiceGetLiveRoomLotteryResult) GetSuccess() (v *GetLiveRoomLotteryResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetLiveRoomLotteryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetLiveRoomLotteryResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetLiveRoomLotteryResponse)
}

var fieldIDToName_LotteryServiceGetLiveRoomLotteryResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetLiveRoomLotteryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetLiveRoomLotteryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetLiveRoomLotteryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetLiveRoomLotteryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetLiveRoomLotteryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LotteryServiceGetLiveRoomLotteryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetLiveRoomLottery_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetLiveRoomLotteryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetLiveRoomLotteryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetLiveRoomLotteryResult(%+v)", *p)

}

func (p *LotteryServiceGetLiveRoomLotteryResult) DeepEqual(ano *LotteryServiceGetLiveRoomLotteryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetLiveRoomLotteryResult) Field0DeepEqual(src *GetLiveRoomLotteryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceDrawLotteryArgs struct {
	Req *DrawLotteryRequest `thrift:"req,1" frugal:"1,default,DrawLotteryRequest" json:"req"`
}

func NewLotteryServiceDrawLotteryArgs() *LotteryServiceDrawLotteryArgs {
	return &LotteryServiceDrawLotteryArgs{}
}

func (p *LotteryServiceDrawLotteryArgs) InitDefault() {
	*p = LotteryServiceDrawLotteryArgs{}
}

var LotteryServiceDrawLotteryArgs_Req_DEFAULT *DrawLotteryRequest

func (p *LotteryServiceDrawLotteryArgs) GetReq() (v *DrawLotteryRequest) {
	if !p.IsSetReq() {
		return LotteryServiceDrawLotteryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *LotteryServiceDrawLotteryArgs) SetReq(val *DrawLotteryRequest) {
	p.Req = val
}

var fieldIDToName_LotteryServiceDrawLotteryArgs = map[int16]string{
	1: "req",
}

func (p *LotteryServiceDrawLotteryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *LotteryServiceDrawLotteryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceDrawLotteryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceDrawLotteryArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDrawLotteryRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *LotteryServiceDrawLotteryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DrawLottery_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceDrawLotteryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LotteryServiceDrawLotteryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceDrawLotteryArgs(%+v)", *p)

}

func (p *LotteryServiceDrawLotteryArgs) DeepEqual(ano *LotteryServiceDrawLotteryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *LotteryServiceDrawLotteryArgs) Field1DeepEqual(src *DrawLotteryRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceDrawLotteryResult struct {
	Success *DrawLotteryResponse `thrift:"success,0,optional" frugal:"0,optional,DrawLotteryResponse" json:"success,omitempty"`
}

func NewLotteryServiceDrawLotteryResult() *LotteryServiceDrawLotteryResult {
	return &LotteryServiceDrawLotteryResult{}
}

func (p *LotteryServiceDrawLotteryResult) InitDefault() {
	*p = LotteryServiceDrawLotteryResult{}
}

var LotteryServiceDrawLotteryResult_Success_DEFAULT *DrawLotteryResponse

func (p *LotteryServiceDrawLotteryResult) GetSuccess() (v *DrawLotteryResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceDrawLotteryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceDrawLotteryResult) SetSuccess(x interface{}) {
	p.Success = x.(*DrawLotteryResponse)
}

var fieldIDToName_LotteryServiceDrawLotteryResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceDrawLotteryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceDrawLotteryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceDrawLotteryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceDrawLotteryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDrawLotteryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LotteryServiceDrawLotteryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DrawLottery_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceDrawLotteryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceDrawLotteryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceDrawLotteryResult(%+v)", *p)

}

func (p *LotteryServiceDrawLotteryResult) DeepEqual(ano *LotteryServiceDrawLotteryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceDrawLotteryResult) Field0DeepEqual(src *DrawLotteryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type LotteryServiceGetAllUnDrawLotteryArgs struct {
}

func NewLotteryServiceGetAllUnDrawLotteryArgs() *LotteryServiceGetAllUnDrawLotteryArgs {
	return &LotteryServiceGetAllUnDrawLotteryArgs{}
}

func (p *LotteryServiceGetAllUnDrawLotteryArgs) InitDefault() {
	*p = LotteryServiceGetAllUnDrawLotteryArgs{}
}

var fieldIDToName_LotteryServiceGetAllUnDrawLotteryArgs = map[int16]string{}

func (p *LotteryServiceGetAllUnDrawLotteryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetAllUnDrawLotteryArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("GetAllUnDrawLottery_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetAllUnDrawLotteryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetAllUnDrawLotteryArgs(%+v)", *p)

}

func (p *LotteryServiceGetAllUnDrawLotteryArgs) DeepEqual(ano *LotteryServiceGetAllUnDrawLotteryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type LotteryServiceGetAllUnDrawLotteryResult struct {
	Success *GetAllUnDrawLotteryResponse `thrift:"success,0,optional" frugal:"0,optional,GetAllUnDrawLotteryResponse" json:"success,omitempty"`
}

func NewLotteryServiceGetAllUnDrawLotteryResult() *LotteryServiceGetAllUnDrawLotteryResult {
	return &LotteryServiceGetAllUnDrawLotteryResult{}
}

func (p *LotteryServiceGetAllUnDrawLotteryResult) InitDefault() {
	*p = LotteryServiceGetAllUnDrawLotteryResult{}
}

var LotteryServiceGetAllUnDrawLotteryResult_Success_DEFAULT *GetAllUnDrawLotteryResponse

func (p *LotteryServiceGetAllUnDrawLotteryResult) GetSuccess() (v *GetAllUnDrawLotteryResponse) {
	if !p.IsSetSuccess() {
		return LotteryServiceGetAllUnDrawLotteryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LotteryServiceGetAllUnDrawLotteryResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAllUnDrawLotteryResponse)
}

var fieldIDToName_LotteryServiceGetAllUnDrawLotteryResult = map[int16]string{
	0: "success",
}

func (p *LotteryServiceGetAllUnDrawLotteryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LotteryServiceGetAllUnDrawLotteryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LotteryServiceGetAllUnDrawLotteryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LotteryServiceGetAllUnDrawLotteryResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetAllUnDrawLotteryResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *LotteryServiceGetAllUnDrawLotteryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetAllUnDrawLottery_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LotteryServiceGetAllUnDrawLotteryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *LotteryServiceGetAllUnDrawLotteryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LotteryServiceGetAllUnDrawLotteryResult(%+v)", *p)

}

func (p *LotteryServiceGetAllUnDrawLotteryResult) DeepEqual(ano *LotteryServiceGetAllUnDrawLotteryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *LotteryServiceGetAllUnDrawLotteryResult) Field0DeepEqual(src *GetAllUnDrawLotteryResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
