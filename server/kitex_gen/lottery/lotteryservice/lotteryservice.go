// Code generated by Kitex v0.9.1. DO NOT EDIT.

package lotteryservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	lottery "github.com/jizizr/goligoli/server/kitex_gen/lottery"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SetLottery": kitex.NewMethodInfo(
		setLotteryHandler,
		newLotteryServiceSetLotteryArgs,
		newLotteryServiceSetLotteryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLottery": kitex.NewMethodInfo(
		getLotteryHandler,
		newLotteryServiceGetLotteryArgs,
		newLotteryServiceGetLotteryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"JoinLottery": kitex.NewMethodInfo(
		joinLotteryHandler,
		newLotteryServiceJoinLotteryArgs,
		newLotteryServiceJoinLotteryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetLiveRoomLottery": kitex.NewMethodInfo(
		getLiveRoomLotteryHandler,
		newLotteryServiceGetLiveRoomLotteryArgs,
		newLotteryServiceGetLiveRoomLotteryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DrawLottery": kitex.NewMethodInfo(
		drawLotteryHandler,
		newLotteryServiceDrawLotteryArgs,
		newLotteryServiceDrawLotteryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	lotteryServiceServiceInfo                = NewServiceInfo()
	lotteryServiceServiceInfoForClient       = NewServiceInfoForClient()
	lotteryServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return lotteryServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return lotteryServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return lotteryServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "LotteryService"
	handlerType := (*lottery.LotteryService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "lottery",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func setLotteryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lottery.LotteryServiceSetLotteryArgs)
	realResult := result.(*lottery.LotteryServiceSetLotteryResult)
	success, err := handler.(lottery.LotteryService).SetLottery(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLotteryServiceSetLotteryArgs() interface{} {
	return lottery.NewLotteryServiceSetLotteryArgs()
}

func newLotteryServiceSetLotteryResult() interface{} {
	return lottery.NewLotteryServiceSetLotteryResult()
}

func getLotteryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lottery.LotteryServiceGetLotteryArgs)
	realResult := result.(*lottery.LotteryServiceGetLotteryResult)
	success, err := handler.(lottery.LotteryService).GetLottery(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLotteryServiceGetLotteryArgs() interface{} {
	return lottery.NewLotteryServiceGetLotteryArgs()
}

func newLotteryServiceGetLotteryResult() interface{} {
	return lottery.NewLotteryServiceGetLotteryResult()
}

func joinLotteryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lottery.LotteryServiceJoinLotteryArgs)
	realResult := result.(*lottery.LotteryServiceJoinLotteryResult)
	success, err := handler.(lottery.LotteryService).JoinLottery(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLotteryServiceJoinLotteryArgs() interface{} {
	return lottery.NewLotteryServiceJoinLotteryArgs()
}

func newLotteryServiceJoinLotteryResult() interface{} {
	return lottery.NewLotteryServiceJoinLotteryResult()
}

func getLiveRoomLotteryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lottery.LotteryServiceGetLiveRoomLotteryArgs)
	realResult := result.(*lottery.LotteryServiceGetLiveRoomLotteryResult)
	success, err := handler.(lottery.LotteryService).GetLiveRoomLottery(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLotteryServiceGetLiveRoomLotteryArgs() interface{} {
	return lottery.NewLotteryServiceGetLiveRoomLotteryArgs()
}

func newLotteryServiceGetLiveRoomLotteryResult() interface{} {
	return lottery.NewLotteryServiceGetLiveRoomLotteryResult()
}

func drawLotteryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*lottery.LotteryServiceDrawLotteryArgs)
	realResult := result.(*lottery.LotteryServiceDrawLotteryResult)
	success, err := handler.(lottery.LotteryService).DrawLottery(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newLotteryServiceDrawLotteryArgs() interface{} {
	return lottery.NewLotteryServiceDrawLotteryArgs()
}

func newLotteryServiceDrawLotteryResult() interface{} {
	return lottery.NewLotteryServiceDrawLotteryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SetLottery(ctx context.Context, req *lottery.SetLotteryRequest) (r *lottery.SetLotteryResponse, err error) {
	var _args lottery.LotteryServiceSetLotteryArgs
	_args.Req = req
	var _result lottery.LotteryServiceSetLotteryResult
	if err = p.c.Call(ctx, "SetLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLottery(ctx context.Context, req *lottery.GetLotteryRequest) (r *lottery.GetLotteryResponse, err error) {
	var _args lottery.LotteryServiceGetLotteryArgs
	_args.Req = req
	var _result lottery.LotteryServiceGetLotteryResult
	if err = p.c.Call(ctx, "GetLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) JoinLottery(ctx context.Context, req *lottery.JoinLotteryRequest) (r *lottery.JoinLotteryResponse, err error) {
	var _args lottery.LotteryServiceJoinLotteryArgs
	_args.Req = req
	var _result lottery.LotteryServiceJoinLotteryResult
	if err = p.c.Call(ctx, "JoinLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLiveRoomLottery(ctx context.Context, req *lottery.GetLiveRoomLotteryRequest) (r *lottery.GetLiveRoomLotteryResponse, err error) {
	var _args lottery.LotteryServiceGetLiveRoomLotteryArgs
	_args.Req = req
	var _result lottery.LotteryServiceGetLiveRoomLotteryResult
	if err = p.c.Call(ctx, "GetLiveRoomLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DrawLottery(ctx context.Context, req *lottery.DrawLotteryRequest) (r *lottery.DrawLotteryResponse, err error) {
	var _args lottery.LotteryServiceDrawLotteryArgs
	_args.Req = req
	var _result lottery.LotteryServiceDrawLotteryResult
	if err = p.c.Call(ctx, "DrawLottery", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
