// Code generated by Kitex v0.9.1. DO NOT EDIT.

package pushservice

import (
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	push "github.com/jizizr/goligoli/server/kitex_gen/push"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PushMessage": kitex.NewMethodInfo(
		pushMessageHandler,
		newPushServicePushMessageArgs,
		newPushServicePushMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"StopMessage": kitex.NewMethodInfo(
		stopMessageHandler,
		newPushServiceStopMessageArgs,
		newPushServiceStopMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"InitLiveRoomReciver": kitex.NewMethodInfo(
		initLiveRoomReciverHandler,
		newPushServiceInitLiveRoomReciverArgs,
		newPushServiceInitLiveRoomReciverResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ReceiveMessage": kitex.NewMethodInfo(
		receiveMessageHandler,
		newPushServiceReceiveMessageArgs,
		newPushServiceReceiveMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
}

var (
	pushServiceServiceInfo                = NewServiceInfo()
	pushServiceServiceInfoForClient       = NewServiceInfoForClient()
	pushServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return pushServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return pushServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return pushServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PushService"
	handlerType := (*push.PushService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "push",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func pushMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*push.PushServicePushMessageArgs)

	err := handler.(push.PushService).PushMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newPushServicePushMessageArgs() interface{} {
	return push.NewPushServicePushMessageArgs()
}

func newPushServicePushMessageResult() interface{} {
	return push.NewPushServicePushMessageResult()
}

func stopMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*push.PushServiceStopMessageArgs)

	err := handler.(push.PushService).StopMessage(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newPushServiceStopMessageArgs() interface{} {
	return push.NewPushServiceStopMessageArgs()
}

func newPushServiceStopMessageResult() interface{} {
	return push.NewPushServiceStopMessageResult()
}

func initLiveRoomReciverHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*push.PushServiceInitLiveRoomReciverArgs)

	err := handler.(push.PushService).InitLiveRoomReciver(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newPushServiceInitLiveRoomReciverArgs() interface{} {
	return push.NewPushServiceInitLiveRoomReciverArgs()
}

func newPushServiceInitLiveRoomReciverResult() interface{} {
	return push.NewPushServiceInitLiveRoomReciverResult()
}

func receiveMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("PushService.ReceiveMessage is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &pushServiceReceiveMessageServer{st.Stream}
	return handler.(push.PushService).ReceiveMessage(stream)
}

type pushServiceReceiveMessageClient struct {
	streaming.Stream
}

func (x *pushServiceReceiveMessageClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *pushServiceReceiveMessageClient) Send(m *push.ReceiveMessageRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *pushServiceReceiveMessageClient) Recv() (*push.ReceiveMessageResponse, error) {
	m := new(push.ReceiveMessageResponse)
	return m, x.Stream.RecvMsg(m)
}

type pushServiceReceiveMessageServer struct {
	streaming.Stream
}

func (x *pushServiceReceiveMessageServer) Send(m *push.ReceiveMessageResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *pushServiceReceiveMessageServer) Recv() (*push.ReceiveMessageRequest, error) {
	m := new(push.ReceiveMessageRequest)
	return m, x.Stream.RecvMsg(m)
}

func newPushServiceReceiveMessageArgs() interface{} {
	return push.NewPushServiceReceiveMessageArgs()
}

func newPushServiceReceiveMessageResult() interface{} {
	return push.NewPushServiceReceiveMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PushMessage(ctx context.Context, req *push.PushMessageRequest) (err error) {
	var _args push.PushServicePushMessageArgs
	_args.Req = req
	var _result push.PushServicePushMessageResult
	if err = p.c.Call(ctx, "PushMessage", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) StopMessage(ctx context.Context, req *push.StopMessageRequest) (err error) {
	var _args push.PushServiceStopMessageArgs
	_args.Req = req
	var _result push.PushServiceStopMessageResult
	if err = p.c.Call(ctx, "StopMessage", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) InitLiveRoomReciver(ctx context.Context, req *push.InitLiveRoomReciverRequest) (err error) {
	var _args push.PushServiceInitLiveRoomReciverArgs
	_args.Req = req
	var _result push.PushServiceInitLiveRoomReciverResult
	if err = p.c.Call(ctx, "InitLiveRoomReciver", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) ReceiveMessage(ctx context.Context) (PushService_ReceiveMessageClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "ReceiveMessage", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &pushServiceReceiveMessageClient{res.Stream}
	return stream, nil
}
