// Code generated by Kitex v0.9.1. DO NOT EDIT.

package pushservice

import (
	"context"
	"errors"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	push "github.com/jizizr/goligoli/server/kitex_gen/push"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PushBullet": kitex.NewMethodInfo(
		pushBulletHandler,
		newPushServicePushBulletArgs,
		newPushServicePushBulletResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ReceiveBullet": kitex.NewMethodInfo(
		receiveBulletHandler,
		newPushServiceReceiveBulletArgs,
		newPushServiceReceiveBulletResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
}

var (
	pushServiceServiceInfo                = NewServiceInfo()
	pushServiceServiceInfoForClient       = NewServiceInfoForClient()
	pushServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return pushServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return pushServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return pushServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "PushService"
	handlerType := (*push.PushService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "push",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func pushBulletHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*push.PushServicePushBulletArgs)

	err := handler.(push.PushService).PushBullet(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newPushServicePushBulletArgs() interface{} {
	return push.NewPushServicePushBulletArgs()
}

func newPushServicePushBulletResult() interface{} {
	return push.NewPushServicePushBulletResult()
}

func receiveBulletHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("PushService.ReceiveBullet is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &pushServiceReceiveBulletServer{st.Stream}
	return handler.(push.PushService).ReceiveBullet(stream)
}

type pushServiceReceiveBulletClient struct {
	streaming.Stream
}

func (x *pushServiceReceiveBulletClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *pushServiceReceiveBulletClient) Send(m *push.ReceiveBulletRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *pushServiceReceiveBulletClient) Recv() (*push.ReceiveBulletResponse, error) {
	m := new(push.ReceiveBulletResponse)
	return m, x.Stream.RecvMsg(m)
}

type pushServiceReceiveBulletServer struct {
	streaming.Stream
}

func (x *pushServiceReceiveBulletServer) Send(m *push.ReceiveBulletResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *pushServiceReceiveBulletServer) Recv() (*push.ReceiveBulletRequest, error) {
	m := new(push.ReceiveBulletRequest)
	return m, x.Stream.RecvMsg(m)
}

func newPushServiceReceiveBulletArgs() interface{} {
	return push.NewPushServiceReceiveBulletArgs()
}

func newPushServiceReceiveBulletResult() interface{} {
	return push.NewPushServiceReceiveBulletResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) PushBullet(ctx context.Context, req *push.PushBulletRequest) (err error) {
	var _args push.PushServicePushBulletArgs
	_args.Req = req
	var _result push.PushServicePushBulletResult
	if err = p.c.Call(ctx, "PushBullet", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) ReceiveBullet(ctx context.Context) (PushService_ReceiveBulletClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "ReceiveBullet", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &pushServiceReceiveBulletClient{res.Stream}
	return stream, nil
}
